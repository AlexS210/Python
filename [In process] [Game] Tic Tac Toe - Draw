# The next logical step is to deal with handling user input. When a player (say player 1, who is X)
# wants to place an X on the screen, they canâ€™t just click on a terminal. So we are going to approximate
# this clicking simply by asking the user for a coordinate of where they want to place their piece.


game = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
player = 1
game_continue = True


def who_won():
    win = False
    
    # Checking horizontal lines for winner
    for rows in game:
        for item in rows:
            if item != 0:
                if rows == [item, item, item]:
                    print(f'Player {player} won.')
                    win = True
                    break

    # Checking vertical lines for winner
    for x in range(0, 3):
        if game[0][x] == game[1][x] == game[2][x] and game[0][x] != 0:
            print(f'Player {player} won.')
            win = True
            break

    # Checking diagonals for winner
    if game[0][0] == game[1][1] == game[2][2] and game[0][0] != 0:
        print(f'Player {player} won.')
        win = True
    elif game[0][2] == game[1][1] == game[2][0] and game[0][2] != 0:
        print(f'Player {player} won.')
        win = True
    return not win


def draw(matrix):
    print(matrix[0])
    print(matrix[1])
    print(matrix[2])


def switch_players(arg):
    return 1 if arg == 2 else 2


while game_continue:
    # Take input coordinates
    player_turn = input('Row and Column (r,c): ')
    turn_row, turn_column = player_turn.split(',')
    turn_row = int(turn_row)
    turn_column = int(turn_column)
    
    game[turn_row - 1][turn_column - 1] = player  # Changing matrix
    
    game_continue = who_won()  # Check for winner
    player = switch_players(player)  # Switching players
    draw(game)
